// 전제 DataBase 전용인 TemplateId를 유저에게 공개하는 것은 좀 불안하니깐, 가급적 사용을 자제한다. InstanceId를 사용한다?

UI로 Stage 이동 시, Error 발생 - GetNearbyPosition 후에 Stage를 Load해서 발생하는 문제로 보임

To Do :
1. Stat 적용관련 - 어떤 Stat이 어떤 StatModType 만큼 상승하는지 Class로 묶은 뒤, List로 관리해야할 듯
2. EventBinding - GameManager에 BroadcastEvent 함수로 통일하기
	+ OnHandleBroadcastEvent 활용할 시 무한 루프가 발생 가능성이 있는지 지속적으로 확인해볼 것
# ChangeInventory
# KillMonster






★★★★★★★★★★★★★★★★★★★★★★★★★ To Day To Do
1. Clear했을 때 Item이 중복으로 등장
2. 모든 Item을 획득했을 시 선택 화면에서 벗어날 수 없음

4. Item Slot Type

 
5. Player 그림자 수정
- Player 하위에 그림자가 있을텐데, Player와 그림자가 동일한 계층을 가지도록 수정

// DeBuff와 화염 Skill 피해량을 낮추는 수치인가?
// 

6. 게임 끌 때 error 생기는 문제




-- Interface 활용을 고려할 것 --
Artifact Item ApplyAbility 함수 처리 - 함수로 분기처리하지 말고 Interface Class로 빼자
Usable Item 사용 부분 개별처리








--서리--
1. 타일에 표시하느냐
2. 테두리에 표시 하느냐
3. 퍼즐을 넘어서 겹치게 하느냐


- 강아지가 신호를 줆 > 누르면 원형 게이지가 생김.

- 에초에 큰 원이 생기고 점차 줄어듦
강아지가 밟고 있는 발판은 무지개 발판, 부가 효과 > 시작 부분에서 신경 써야하는 요소를 줄임




---Item 적용 Process---
Inventory.MakeItem() > Inventory.EquipItem() > Item.ApplyItem()

Equipment를 통해 Player Stat에 적용하는 값 중, 새로운 값(ex. 마법저항력)이 등장하면 코드에서 적용할 수 있돌고 만들어야 한다.


★★★★★★★★★★★
Item 코드에서 어떤 Stat을 상승시킬 수 있는 Item인지 판별하는 함수가 Stat 종류마다 존재한다. (Is어쩌구 함수)
하나의 함수로 통합할 수 있을 것으로 보임. Swich Case로 Type을 기준으로 분기해서 만들면 될 듯

KillCount BroadCasting Type을 하나만들자. 예시로, Manager에서 강제로 KillCount를 수정하는 일이 발생하면, UI에 적용되지 않는 일이 발생할 수 있기 때문에 서로 분리해서 관리하는 게 좋아 보인다




특수한 Trigger방식의 Item(범 System적인 Item_FireSkill 발동 시 ~~~는  Event CallBack 방식으로 만든다.
그럼 기존에 만들어둔, Item 상속 구조를 더 깊고 다각화 해서 만들어야 한다. Init할 때 Event를 recieve하도록 만들자

Wave를 바꾸는 함수는 Transition에 넣자 - 현재는 Stage Class에서 Count 프로퍼티에서 바꾸는 중.
